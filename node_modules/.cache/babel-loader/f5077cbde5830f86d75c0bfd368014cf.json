{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\mdfar\\\\Capstone\\\\frontend\\\\src\\\\components\\\\Comments\\\\Comments.jsx\",\n    _s = $RefreshSig$();\n\nimport { useContext, useState } from \"react\";\nimport \"./comments.scss\";\nimport { AuthContext } from \"../../context/authContext\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { makeRequest } from \"../../axios\";\nimport moment from \"moment\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Comments = _ref => {\n  _s();\n\n  let {\n    postId\n  } = _ref;\n  const [desc, setDesc] = useState(\"\");\n  const {\n    currentUser\n  } = useContext(AuthContext);\n  const {\n    isLoading,\n    error,\n    data\n  } = useQuery([\"comments\"], () => makeRequest.get(\"/comments?postId=\" + postId).then(res => {\n    return res.data;\n  }));\n  const queryClient = useQueryClient();\n  const mutation = useMutation(newComment => {\n    return makeRequest.post(\"/comment\", newComment);\n  }, {\n    onSuccess: () => {\n      // Invalidate and refetch\n      queryClient.invalidateQueries([\"comments\"]);\n    }\n  });\n\n  const handleClick = async e => {\n    e.preventDefault();\n    mutation.mutate({\n      desc,\n      postId\n    });\n    setDesc(\"\");\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"comments\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"write\",\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        src: currentUser.profilePic,\n        alt: \"\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"write a comment\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this), isLoading ? \"Loading...\" : data.map(comment => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"comment\",\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        src: comment.profilePicture,\n        alt: \"\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"info\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          children: comment.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: comment.desc\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"date\",\n        children: moment(comment.createdAt).fromNow()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 15\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 13\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Comments, \"Fsi/C5X0aJaIFg1YxzJ6bbBdWOc=\", false, function () {\n  return [useQuery, useQueryClient, useMutation];\n});\n\n_c = Comments;\nexport default Comments;\n\nvar _c;\n\n$RefreshReg$(_c, \"Comments\");","map":{"version":3,"sources":["C:/Users/mdfar/Capstone/frontend/src/components/Comments/Comments.jsx"],"names":["useContext","useState","AuthContext","useQuery","useMutation","useQueryClient","makeRequest","moment","Comments","postId","desc","setDesc","currentUser","isLoading","error","data","get","then","res","queryClient","mutation","newComment","post","onSuccess","invalidateQueries","handleClick","e","preventDefault","mutate","profilePic","map","comment","profilePicture","name","createdAt","fromNow"],"mappings":"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","sourcesContent":["import { useContext, useState } from \"react\";\r\nimport \"./comments.scss\";\r\nimport { AuthContext } from \"../../context/authContext\";\r\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\r\nimport { makeRequest } from \"../../axios\";\r\nimport moment from \"moment\";\r\n\r\n\r\nconst Comments = ({ postId }) => {\r\n\r\n  const [desc, setDesc] = useState(\"\")\r\n  const { currentUser } = useContext(AuthContext);\r\n\r\n  const { isLoading, error, data } = useQuery([\"comments\"], () =>\r\n    makeRequest.get(\"/comments?postId=\" + postId).then((res) => {\r\n      return res.data;\r\n    })\r\n  );\r\n\r\n  const queryClient = useQueryClient();\r\n\r\n  const mutation = useMutation(\r\n    (newComment) => {\r\n      return makeRequest.post(\"/comment\", newComment);\r\n    },\r\n    {\r\n      onSuccess: () => {\r\n        // Invalidate and refetch\r\n        queryClient.invalidateQueries([\"comments\"]);\r\n      },\r\n    }\r\n  );\r\n\r\n  const handleClick = async (e) => {\r\n    e.preventDefault();\r\n    mutation.mutate({ desc, postId });\r\n    setDesc(\"\");\r\n  };\r\n\r\n  return (\r\n    <div className=\"comments\">\r\n      <div className=\"write\">\r\n        <img src={currentUser.profilePic} alt=\"\" />\r\n        <input type=\"text\" placeholder=\"write a comment\" />\r\n        <button>Send</button>\r\n      </div>\r\n      {isLoading\r\n        ? \"Loading...\"\r\n        : data.map((comment) => (\r\n            <div className=\"comment\">\r\n              <img src={comment.profilePicture} alt=\"\" />\r\n              <div className=\"info\">\r\n                <span>{comment.name}</span>\r\n                <p>{comment.desc}</p>\r\n              </div>\r\n              <span className=\"date\">\r\n                {moment(comment.createdAt).fromNow()}\r\n              </span>\r\n            </div>\r\n          ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Comments;\r\n"]},"metadata":{},"sourceType":"module"}